import{_ as a,c as n,o as p,ag as e}from"./chunks/framework.CuEzzO-W.js";const l="/gooze-docs/assets/gooze-cli.9YmiqhJ9.png",u=JSON.parse('{"title":"Gooze-Cli 是什么？","description":"","frontmatter":{},"headers":[],"relativePath":"guide/what-is-gooze-cli.md","filePath":"guide/what-is-gooze-cli.md"}'),i={name:"guide/what-is-gooze-cli.md"};function c(o,s,t,d,r,h){return p(),n("div",null,s[0]||(s[0]=[e('<h1 id="what-is-gooze-cli" tabindex="-1">Gooze-Cli 是什么？ <a class="header-anchor" href="#what-is-gooze-cli" aria-label="Permalink to &quot;Gooze-Cli 是什么？{#what-is-gooze-cli}&quot;">​</a></h1><p><code>Gooze-Cli</code> 是基于 <code>gooze-starter</code> 来快速构建 Go 服务的 <code>cli</code> 工具，使用它可以按照 Go 社区的项目最佳实践来一键生成一个优雅的 Go 项目结构，并生成相应的代码文件。</p><h2 id="和-gooze-starter-的关系" tabindex="-1">和 <code>gooze-starter</code> 的关系 <a class="header-anchor" href="#和-gooze-starter-的关系" aria-label="Permalink to &quot;和 `gooze-starter` 的关系&quot;">​</a></h2><ol><li><p>使用了 <code>gooze-starter</code> 的 <code>gen api</code> 指令自动生成了 <code>dto</code>、<code>handler</code>、<code>service</code>、<code>router</code>、<code>httpServer</code> 代码</p></li><li><p>在 <code>gooze-starter</code> 的基础上自动生成了一个优雅的 Go 项目结构</p></li><li><p>在项目中，自动生成了 <code>gen.sh</code> 代码生成脚本、 <code>start.sh</code> 项目启动脚本</p></li><li><p><strong>这个 <code>cli</code> 不是必须一定要使用的，当你觉得它生成的项目结构不如你意，你完全可以自己基于 <code>gooze-starter</code> 按照你的需求和爱好自行创建项目结构</strong></p></li></ol><h2 id="get-what" tabindex="-1">能得到什么 <a class="header-anchor" href="#get-what" aria-label="Permalink to &quot;能得到什么 {#get-what}&quot;">​</a></h2><p>使用该 <code>cli</code> 工具，你只需要按照提示输入项目名、项目类型等，即可得到一个开箱即用的优雅的 Go 项目结构</p><p><img src="'+l+`" alt="Gooze Cli" title="Gooze Cli" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title"><strong>是否需要多个子目录</strong>是什么意思？</p><p>当我们在一个项目中同时提供多个独立的 API 服务（管理后台、C 端 APP、C 端 Web 等），每个端都有自己完整的 API 接口</p><p>那么实现方式肯定是 <strong>创建多个子目录</strong></p></div><p>所以，当这个选择为 <code>true</code> 时，目录结构如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my-project/</span></span>
<span class="line"><span>├── api/                      # API 描述文件目录</span></span>
<span class="line"><span>│   ├── admin/                # 管理后台端 API 描述</span></span>
<span class="line"><span>│   │   └── user.api</span></span>
<span class="line"><span>│   └── client/               # 客户端 API 描述</span></span>
<span class="line"><span>│       └── user.api</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── build/                    # 构建相关脚本（如 Dockerfile、CI 脚本）</span></span>
<span class="line"><span>│   ├── scripts/              # 启动/部署等辅助脚本（如 build.sh）</span></span>
<span class="line"><span>│   │   └── gen.sh            # 通用代码生成脚本</span></span>
<span class="line"><span>│   │   └── gen_*.sh          # 代码生成脚本 *代表对应端</span></span>
<span class="line"><span>│   │   └── start_*.sh        # 项目启动脚本 *代表对应端</span></span>
<span class="line"><span>│   └── docker/               # Dockerfile 或 compose 文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── cmd/                      # 每个服务的启动入口</span></span>
<span class="line"><span>│   ├── admin/                # 管理后台服务入口</span></span>
<span class="line"><span>│   │   └── main.go</span></span>
<span class="line"><span>│   └── client/               # 客户端服务入口</span></span>
<span class="line"><span>│       └── main.go</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── configs/                  # 应用级配置（YAML 格式）</span></span>
<span class="line"><span>│   ├── admin.yaml            # admin 端配置文件</span></span>
<span class="line"><span>│   └── client.yaml           # client 端配置文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── docs/                     # 文档入口</span></span>
<span class="line"><span>│   ├── swagger/              # Swagger 文档</span></span>
<span class="line"><span>│   │   ├── admin/            # admin 接口文档</span></span>
<span class="line"><span>│   │   │  └── user.yaml</span></span>
<span class="line"><span>│   │   └── client/           # client 接口文档</span></span>
<span class="line"><span>│   │      └── user.yaml</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── internal/                 # 核心业务代码（按端划分）</span></span>
<span class="line"><span>│   ├── admin/                # 管理后台模块</span></span>
<span class="line"><span>│   │   ├── handler/          # 控制器层（接收请求，返回响应）</span></span>
<span class="line"><span>│   │   ├── dto/              # 请求/响应的数据结构</span></span>
<span class="line"><span>│   │   ├── router/           # 路由定义</span></span>
<span class="line"><span>│   │   ├── service/          # 业务逻辑</span></span>
<span class="line"><span>│   │   └── bootstrap/        # 启动逻辑</span></span>
<span class="line"><span>│   └── client/               # 客户端模块（结构同 admin）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── pkg/                      # 可复用公共组件（非业务相关）</span></span>
<span class="line"><span>│   ├── model/                # 通用数据库模型</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── static/                   # 静态资源</span></span>
<span class="line"><span>│   ├── storage/              # 存放临时文件、用户上传文件、缓存等</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── test/                     # 测试文件（单测、集成测试等）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── .env.admin                # 管理后台的环境变量文件</span></span>
<span class="line"><span>├── .env.client               # 客户端的环境变量文件</span></span>
<span class="line"><span>├── .gitignore                # Git 忽略文件</span></span>
<span class="line"><span>├── go.mod                    # Go 模块定义</span></span>
<span class="line"><span>├── go.sum                    # Go 依赖校验文件</span></span>
<span class="line"><span>└── README.md                 # 项目说明文档</span></span></code></pre></div><p>当这个选择为 <code>false</code> 时，目录结构如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my-project/</span></span>
<span class="line"><span>├── api/                      # API 描述文件（如 user.api）</span></span>
<span class="line"><span>│   └── user.api</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── build/                    # 构建相关脚本（如 Dockerfile、CI 脚本）</span></span>
<span class="line"><span>│   ├── scripts/              # 启动/部署等辅助脚本（如 build.sh）</span></span>
<span class="line"><span>│   │   └── gen.sh            # 代码生成脚本</span></span>
<span class="line"><span>│   │   └── start.sh          # 项目启动脚本</span></span>
<span class="line"><span>│   └── docker/               # Dockerfile 或 compose 文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── cmd/                      # 程序入口</span></span>
<span class="line"><span>│   ├── server/               # 服务入口</span></span>
<span class="line"><span>│   │   └── main.go</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── configs/                  # 应用配置文件</span></span>
<span class="line"><span>│   └── config.yaml           # 主配置文件（可配合 .env 使用）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── docs/                     # 文档入口</span></span>
<span class="line"><span>│   ├── swagger/              # Swagger 接口文档</span></span>
<span class="line"><span>│   │   └── user.yaml</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── internal/                 # 核心业务代码</span></span>
<span class="line"><span>│   ├── handler/              # 控制器层（接收请求，返回响应）</span></span>
<span class="line"><span>│   ├── dto/                  # 请求/响应的数据结构</span></span>
<span class="line"><span>│   ├── router/               # 路由定义</span></span>
<span class="line"><span>│   ├── service/              # 业务逻辑</span></span>
<span class="line"><span>│   └── bootstrap/            # 启动逻辑</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── pkg/                      # 可复用公共组件（非业务相关）</span></span>
<span class="line"><span>│   ├── model/                # 通用数据库模型</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── static/                   # 静态资源</span></span>
<span class="line"><span>│   ├── storage/              # 存放临时文件、用户上传文件、缓存等</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── test/                     # 单元测试 / 集成测试代码</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── .env                      # 环境变量文件（用于区分本地/测试/生产）</span></span>
<span class="line"><span>├── .gitignore                # Git 忽略文件</span></span>
<span class="line"><span>├── go.mod                    # Go 模块定义</span></span>
<span class="line"><span>├── go.sum                    # Go 依赖校验文件</span></span>
<span class="line"><span>└── README.md                 # 项目说明文档</span></span></code></pre></div><p>可以看到，创建多个子目录，主要是为了分层管理</p><p>目录结构没有什么大的差异，只是 <code>api</code>、<code>cmd</code>、<code>internal</code> 多了一个层级</p><div class="warning custom-block"><p class="custom-block-title">不认可这个项目结构？</p><p>如果你认为 <code>gooze-cli</code> 生成的目录结构你不满意，那你完全可以使用 <code>gooze-starter</code> 自行生成</p></div><h2 id="how-use" tabindex="-1">如何使用 <a class="header-anchor" href="#how-use" aria-label="Permalink to &quot;如何使用 {#how-use}&quot;">​</a></h2><h3 id="要求" tabindex="-1">要求 <a class="header-anchor" href="#要求" aria-label="Permalink to &quot;要求&quot;">​</a></h3><ul><li>Go 1.24 或更高版本</li></ul><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com/soryetong/gooze-cli@latest</span></span></code></pre></div><p>然后，<strong>进入你想存放的项目的目录中</strong>，运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gooze-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果 <code>go install</code> 成功，却提示找不到 <code>gooze-cli</code> 命令，那么需要先添加环境变量</p></div><p>运行该命令后，会提示你输入项目名、项目类型等，按照提示输入等待运行完成即可。</p>`,24)]))}const m=a(i,[["render",c]]);export{u as __pageData,m as default};
