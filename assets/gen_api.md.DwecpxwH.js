import{_ as e,C as h,c as k,o as d,ag as n,j as s,G as p,w as t,a as l}from"./chunks/framework.CuEzzO-W.js";const B=JSON.parse('{"title":"API 代码生成","description":"","frontmatter":{},"headers":[],"relativePath":"gen/api.md","filePath":"gen/api.md"}'),r={name:"gen/api.md"},o={tabindex:"0"};function g(E,i,c,F,y,u){const a=h("nobr");return d(),k("div",null,[i[7]||(i[7]=n(`<h1 id="genapi" tabindex="-1">API 代码生成 <a class="header-anchor" href="#genapi" aria-label="Permalink to &quot;API 代码生成 {#genapi}&quot;">​</a></h1><div class="tip custom-block" style="padding-top:8px;"><p>基于内置的 <code>gooze</code> 命令行工具 <code>go run main.go gen api ...</code> 实现</p></div><br><div class="tip custom-block"><p class="custom-block-title">建议</p><p>如果你把 Admin-Server 和 Customer-API 放在了同一个项目下时，建议分层</p><p>如 admin 目录是管理后台的 API，customer 目录是面向 C 端的 API</p></div><div class="tip custom-block" style="padding-top:8px;"><p>以下示例分了项目，admin 和 customer 是单独的项目</p></div><h2 id="创建-api-描述文件" tabindex="-1">创建 api 描述文件 <a class="header-anchor" href="#创建-api-描述文件" aria-label="Permalink to &quot;创建 api 描述文件&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api/test1.api</span></span></code></pre></div><p><strong>📘 API 描述文件格式说明（.api）</strong></p><ol><li>文件结构示例</li></ol><div class="language-api vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">api</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 文件: api/test1.api</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 定义请求结构体</span></span>
<span class="line"><span>type TestReq {</span></span>
<span class="line"><span>    Page int64 \`json:&quot;page&quot; form:&quot;page&quot; binding:&quot;required&quot; description:&quot;页数&quot;\`</span></span>
<span class="line"><span>    PageSize int64 \`json:&quot;pageSize&quot; form:&quot;pageSize&quot; binding:&quot;required&quot; description:&quot;每页数量&quot;\`</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 定义响应结构体</span></span>
<span class="line"><span>type TestResp {</span></span>
<span class="line"><span>    Name string \`json:&quot;name&quot;\`</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 定义服务模块</span></span>
<span class="line"><span>service SystemTest1 Group Public { # 这一行的内容，同一个文件中，不能重复</span></span>
<span class="line"><span>    get test1 (TestReq) returns (TestResp)</span></span>
<span class="line"><span>    post test2 returns</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>service SystemTest2 Group Auth {</span></span>
<span class="line"><span>    get test1 (TestReq) returns (TestResp)</span></span>
<span class="line"><span>    post test2 returns</span></span>
<span class="line"><span>}</span></span></code></pre></div><br><div class="tip custom-block"><p class="custom-block-title">你必须要先知道的事情</p><ol><li><p>api 的文件名将决定生成的 <code>dto</code>、<code>handler</code>、<code>logic</code>、<code>router</code> 的文件名</p><p>同时也决定生成的 <code>LogicName</code></p><p>比如你的文件名是 <code>system_user</code> 那么生成的 <code>LogicName</code> 将是 <code>NewSystemUserLogic</code></p></li><li><p>服务模块 <code>service ***</code> 主要是用来区分路由组的</p><p>一个模块就是一个路由组，一个 api 文件内可以包含多个模块，但 <code>service + Group</code> 不能重复</p><p>同时，这个服务名，也将决定生成的路由前缀</p><p>比如 <code>service SystemUser</code> 生成的路由前缀将是 <code>/system/user</code></p></li></ol></div><br><ol start="2"><li>语法详解</li></ol><p>✅ 基础结构体定义（type）</p><div class="tip custom-block" style="padding-top:8px;"><p>用于定义接口的请求参数、响应结构。</p></div><ul><li><p><code>type</code> 开头的内容最终会生成对应的结构体，内容和 Gin 的保持一致</p></li><li><p>请求参数最好以 <code>Req</code> 结尾，响应参数最好以 <code>Resp</code> 结尾</p></li><li><p>它的 tag 支持</p><table tabindex="0"><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>json</code></td><td>通用（序列化、<code>post</code> 请求参数等）</td></tr><tr><td><code>form</code></td><td>绑定 <code>get</code> 请求的参数</td></tr><tr><td><code>binding</code></td><td>参数校验规则，规则的定义与 <code>Gin</code> 的保持一致</td></tr><tr><td><code>description</code></td><td>这个主要用于 <code>swagger</code> 文档生成时的描述</td></tr></tbody></table></li></ul><br><p>✅ 接口模块定义（service）</p><div class="tip custom-block" style="padding-top:8px;"><p>用于定义接口分组、请求方法、参数和返回结构体。</p></div><ul><li><p>必须以 service 打头，会生成对应的接口、方法</p></li><li><p>每个接口方法需独占一行，不支持多方法同行定义</p></li><li><p>如果没有请求参数，可以省略 ()，或使用 returns 直接结尾</p></li><li><p>如果没有返回值，使用 returns（不加结构体名）</p></li><li><p><strong><code>Group Auth</code> 表示这个模块属于哪个 <code>Group</code></strong></p><div class="tip custom-block"><p class="custom-block-title"><code>Group</code> 的作用</p><p>Group 是指这个模块所属的组，目前支持 <code>Public</code>、<code>Auth</code>、<code>Token</code></p><p>它会将路由分成不同的组，从而让不同的组使用不同的中间件</p></div><table tabindex="0"><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>Public</code></td><td>不使用任何中间件</td></tr><tr><td><code>Auth</code></td><td>使用 <code>Casbin</code> 权限校验和 <code>Jwt</code> token 中间件，适用于管理后台</td></tr><tr><td><code>Token</code></td><td>使用 <code>Jwt</code> token 中间件</td></tr></tbody></table></li></ul><br><ol start="3"><li>示例生成效果</li></ol><div class="tip custom-block" style="padding-top:8px;"><p>生成的请求响应结构体代码如下：</p></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestReq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Page     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;page&quot; form:&quot;page&quot; binding:&quot;required&quot; description:&quot;页数&quot; \`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	PageSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;pageSize&quot; form:&quot;pageSize&quot; binding:&quot;required&quot; description:&quot;每页数量&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestResp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;name&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block" style="padding-top:8px;"><p>不同的 <code>Group</code> 生成的路由代码如下：</p></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">publicGroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 健康监测</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    publicGroup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/health&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // your_router</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">privateAuthGroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">privateAuthGroup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gzmiddleware.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Casbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gzmiddleware.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Jwt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // your_router</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">privateTokenGroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">privateTokenGroup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gzmiddleware.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Jwt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // your_router</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="执行命令生成" tabindex="-1">执行命令生成 <a class="header-anchor" href="#执行命令生成" aria-label="Permalink to &quot;执行命令生成&quot;">​</a></h2><div class="tip custom-block" style="padding-top:8px;"><p>当你运行 <code>go run main.go gen api</code> 你会看到以下输出</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     Code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> point</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gooze-starter.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Available</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Subcommands:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Gin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> based</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            --src</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> description</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (required)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            --output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> directory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generated</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> handler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (required)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            --log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Open</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>所以最终的执行命令如下：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --config=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./configs/config.yaml&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --env=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.env&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --src=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./api&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --output=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./internal&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --log=false</span></span></code></pre></div>`,32)),s("table",o,[s("thead",null,[s("tr",null,[i[2]||(i[2]=s("th",null,"配置项",-1)),i[3]||(i[3]=s("th",null,"作用域",-1)),i[4]||(i[4]=s("th",null,"作用域",-1)),s("th",null,[p(a,null,{default:t(()=>i[0]||(i[0]=[l("必填",-1)])),_:1,__:[0]})]),s("th",null,[p(a,null,{default:t(()=>i[1]||(i[1]=[l("默认值",-1)])),_:1,__:[1]})]),i[5]||(i[5]=s("th",null,"描述",-1))])]),i[6]||(i[6]=s("tbody",null,[s("tr",null,[s("td",null,[s("code",null,"--config")]),s("td",null,"string"),s("td",null,"全局参数"),s("td",null,"✅"),s("td",null,"无"),s("td",null,"你的配置文件路径")]),s("tr",null,[s("td",null,[s("code",null,"--env")]),s("td",null,"string"),s("td",null,"全局参数"),s("td",null,"❌"),s("td",null,"无"),s("td",null,"通过 env 文件，重写配置文件内的内容")]),s("tr",null,[s("td",null,[s("code",null,"--src")]),s("td",null,"string"),s("td",null,"特定参数"),s("td",null,"✅"),s("td",null,"无"),s("td",null,"api 描述文件的路径")]),s("tr",null,[s("td",null,[s("code",null,"--output")]),s("td",null,"string"),s("td",null,"特定参数"),s("td",null,"✅"),s("td",null,"无"),s("td",null,"生成代码的保存路径")]),s("tr",null,[s("td",null,[s("code",null,"--log")]),s("td",null,"bool"),s("td",null,"特定参数"),s("td",null,"❌"),s("td",null,"false"),s("td",null,"是否需要请求、响应日志记录中间件")])],-1))]),i[8]||(i[8]=n(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>路径参数支持 绝对路径 和 相对路径</p></div><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><div class="tip custom-block" style="padding-top:8px;"><p>🎉 那么当前你的项目结构应该可能是这样的：</p></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├─ your_project_name</span></span>
<span class="line"><span>├── api/                      # API 描述文件（如 user.api）</span></span>
<span class="line"><span>│   └── user.api</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── configs/                  # 应用配置文件</span></span>
<span class="line"><span>│   └── config.yaml           # 主配置文件（可配合 .env 使用）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── docs/                     # 文档入口</span></span>
<span class="line"><span>│   ├── swagger/              # Swagger 接口文档</span></span>
<span class="line"><span>│   │   └── user.yaml</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── internal/                 # 核心业务代码</span></span>
<span class="line"><span>│   ├── handler/              # 控制器层（接收请求，返回响应）</span></span>
<span class="line"><span>│   ├── dto/                  # 请求/响应的数据结构</span></span>
<span class="line"><span>│   ├── router/               # 路由定义</span></span>
<span class="line"><span>│   ├── service/              # 业务逻辑</span></span>
<span class="line"><span>│   └── bootstrap/            # 启动逻辑</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── go.mod                    # Go 模块定义</span></span>
<span class="line"><span>├── go.sum                    # Go 依赖校验文件</span></span>
<span class="line"><span>└── main.go                   # 入口文件</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>所以这就是 <code>gooze-starter</code> 的好处之一，它会帮你快速生成那些无关紧要的代码</p><p>而且只会强制 <code>internal</code> 目录下的文件结构，不会干涉你其他目录的定义</p><p>你也不用纠结 「当新开一个项目，那些文件该放哪里，怎么放才能避免<strong>循环依赖 import cycle not allowed</strong>」这些问题了</p></div><h2 id="加载-server" tabindex="-1">加载 Server <a class="header-anchor" href="#加载-server" aria-label="Permalink to &quot;加载 Server&quot;">​</a></h2><div class="tip custom-block" style="padding-top:8px;"><p>当我们代码自动生成后，启动一个 <code>HTTP</code> 服务，只需要一行代码即可</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>服务启动代码位于：<code>internal/bootstrap/**_Server.go</code></p></div><p><strong>在 <code>main.go</code> 中匿名导入自动生成的服务代码即可</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">your_project_name/internal/bootstrap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/soryetong/gooze-starter/gooze</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	gooze.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="server-内容说明" tabindex="-1">Server 内容说明 <a class="header-anchor" href="#server-内容说明" aria-label="Permalink to &quot;Server 内容说明&quot;">​</a></h2><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bootstrap</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/soryetong/gooze-starter/gooze</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/soryetong/gooze-starter/modules/httpmodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/soryetong/gooze-starter/pkg/gzutil</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">your_project_name/internal/router</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 注意修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	gooze.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RegisterService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpServer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gooze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IServer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	httpModule </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">httpmodule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IHttp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 添加回调函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	self.httpModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnStop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exitCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	self.httpModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, gooze.Config.App.Addr, gooze.Config.App.Timeout, router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InitRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self.httpModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TODO 添加回调函数, 无逻辑可直接删除这个方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exitCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gzutil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderlyMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	callback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gzutil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewOrderlyMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	callback.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		gooze.Log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这是程序退出后的回调函数, 执行你想要执行的逻辑, 无逻辑可以直接删除这段代码&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> callback</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p>在 <code>main.go</code> 中匿名导入这个文件，就是为了执行 <code>init()</code> 进行服务注册</p></li><li><p>每一个 <code>server</code> 必须 “继承“ <code>gooze.IServer</code> 并且实现 <code>OnStart()</code> 方法</p></li><li><p><code>exitCallback()</code> 函数是为了在服务停机时执行一些操作，比如：更新数据、清除缓存等等，你没有这些操作可以不要</p><ul><li>但是要注意，<code>gzutil.OrderlyMap</code> 是一个有序的 <code>map</code>，严格按照 <code>Append</code> 的顺序执行, 先进先出，同名会被覆盖</li></ul></li><li><p>你可以在 <code>self.httpModule.Start()</code> 前执行任何你想执行的操作</p></li></ul>`,13))])}const b=e(r,[["render",g]]);export{B as __pageData,b as default};
