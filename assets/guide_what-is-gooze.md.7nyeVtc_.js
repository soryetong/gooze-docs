import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.CuEzzO-W.js";const c=JSON.parse('{"title":"Gooze-Starter 是什么？","description":"","frontmatter":{},"headers":[],"relativePath":"guide/what-is-gooze.md","filePath":"guide/what-is-gooze.md"}'),n={name:"guide/what-is-gooze.md"};function p(l,s,o,h,d,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="what-is-gooze" tabindex="-1">Gooze-Starter 是什么？ <a class="header-anchor" href="#what-is-gooze" aria-label="Permalink to &quot;Gooze-Starter 是什么？{#what-is-gooze}&quot;">​</a></h1><p><code>Gooze-Starter</code> 是一款基于 <code>Go</code> + <code>Gin</code> 的现代化 Web 项目脚手架，聚焦开发效率与工程标准化，支持模块化开发、插件式扩展、可插拔数据库、多环境配置、命令行工具等特性。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>后文全部简称为 <code>gooze</code>，包括主包名也是 <code>gooze</code></p></div><ul><li><p><strong>它是站在巨人的肩膀上而实现的，使用了大量优质的第三方包，介意请慎用</strong></p></li><li><p>它只是我为了快速构建自己的项目而创建的，让我不必在每新建一个新项目都复制这些代码</p></li><li><p>它只是把日常工作中常用的工具和第三方包进行了整合，没有什么高深的技术，也不会有任何的性能影响</p></li><li><p>在项目中，把常用的 MySQL、HTTP、Redis、MongoDB 等以模块化的方式按需加载</p></li></ul><div class="tip custom-block" style="padding-top:8px;"><p>只是想尝试一下？跳到 <a href="./start.html">快速开始</a>。</p></div><h2 id="characteristic" tabindex="-1">特性 <a class="header-anchor" href="#characteristic" aria-label="Permalink to &quot;特性 {#characteristic}&quot;">​</a></h2><p>Gooze-Starter 旨在让 Go 后端服务的构建「更快、更清晰、更优雅」。</p><ul><li><p><strong>超低学习成本与模块化解耦</strong>：基于流行的第三方库封装，内置大量服务与工具，让你聚焦业务逻辑的实现。</p></li><li><p><strong>多数据库驱动可自由切换</strong>：GORM 与 SQLX 可自由切换，既保留链式操作的便捷，也支持原生 SQL 查询，兼顾灵活性与性能。</p></li><li><p><strong>完善的认证与权限系统</strong>：内置 JWT 认证、Casbin 鉴权机制，结合<a href="https://github.com/soryetong/greasyx-vben" target="_blank" rel="noreferrer">Gooze-VBen-Admin</a>，快速搭建企业级后台系统。</p></li><li><p><strong>CLI 工具与自动生成</strong>：内置 gooze 命令行工具，支持自动生成路由、控制器、Model（待实现）、CURD（待实现）等结构代码。</p></li></ul><h2 id="developer-experience" tabindex="-1">开发体验 <a class="header-anchor" href="#developer-experience" aria-label="Permalink to &quot;开发体验 {#developer-experience}&quot;">​</a></h2><ol><li><p>让你的 <code>http</code>、<code>websocket</code> 服务变得简单</p><p><code>gooze</code> 内置了服务管理，你只要按照规范要求进行服务的 <code>Register</code>，然后在 <code>main.go</code> 中匿名导入，你就可以使用这个服务了</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// http_server.go</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gooze.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RegisterService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpServer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gooze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IServer</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    httpModule </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">httpmodule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IHttp</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这个非必需的，你可以使用内置的 http 模块，也可以自行实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // TODO implement</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div> <div class="tip custom-block" style="padding-top:8px;"><p>更多服务介绍 <a href="./http.html">看这里</a>。</p></div></li><li><p><code>gooze</code> 内置了很多模块，你只需在配置文件中配置基本参数，在 <code>main.go</code> 中匿名导入，你就可以使用这个模块了</p><p>例如：<code>mongo</code> 模块，配置文件 <a href="./config.html#mongo">看这里</a></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/soryetong/gooze-starter/modules/mongomodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/soryetong/gooze-starter/gooze</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gooze.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>只需要这一行代码，即可通过 <code>gooze.Mdb</code> 进行 <code>mongo</code> 的数据操作了</p><div class="tip custom-block" style="padding-top:8px;"><p>更多模块介绍 <a href="./modules.html">看这里</a>。</p></div></li><li><p><code>gooze</code> 内置了很多的工具函数，足以让我们在日常开发中使用了</p><p>此时，强烈推荐一个三方库 <code>github.com/spf13/cast</code>， 使用它，可以进行各种 <code>interface to string</code> 、 <code>int64 to string</code> 等等这种的类型转换</p><div class="tip custom-block" style="padding-top:8px;"><p>工具函数介绍 <a href="/gooze-docs/pkg/gzutil.html">看这里</a>。</p></div></li><li><p><code>gooze</code> 内置了 <code>gen api</code> 指令，可通过 <code>**.api</code> 文件快速生成 <code>dto</code>、<code>handler</code>、<code>service</code>、<code>router</code>、<code>httpServer</code> 代码</p><p>你只需要按照 <code>api</code> 文件的要求填入内容即可，没有其他复杂操作</p><div class="tip custom-block" style="padding-top:8px;"><p><code>gen api</code> 代码生成介绍 <a href="/gooze-docs/gen/api.html">看这里</a>。</p></div><p>它你也完全可以不使用，但是使用它，能为我们的开发提升效率</p></li><li><p><code>gooze</code> 提供了配置的 <code>cli</code> 工具，使用 <code>cli</code> 工具可以一键生成一个优雅的 Go 项目结构</p><div class="tip custom-block" style="padding-top:8px;"><p><code>gooze-cli</code> 介绍 <a href="./what-is-gooze-cli.html">看这里</a>。</p></div></li></ol><br><p><strong>更多功能等你改进...</strong></p>`,12)]))}const g=i(n,[["render",p]]);export{c as __pageData,g as default};
